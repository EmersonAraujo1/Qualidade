<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8">
  <title>Painel de Monitorias - CASA</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
  <script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>
  <script src="https://cdn.datatables.net/buttons/2.4.1/js/dataTables.buttons.min.js"></script>
  <script src="https://cdn.datatables.net/buttons/2.4.1/js/buttons.html5.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.1.3/jszip.min.js"></script>
  <link rel="stylesheet" href="https://cdn.datatables.net/1.13.6/css/jquery.dataTables.min.css">
  <link rel="stylesheet" href="https://cdn.datatables.net/buttons/2.4.1/css/buttons.dataTables.min.css">
  <style>
    body {
      background-color: #121212;
      color: #e0e0e0;
      font-family: 'Segoe UI', sans-serif;
      padding: 20px;
    }
    h1 {
      color: #4db8ff;
      margin-bottom: 10px;
    }
    .dashboard {
      display: flex;
      gap: 20px;
      margin-bottom: 20px;
    }
    .card {
      background: #1e1e1e;
      padding: 15px;
      border-radius: 12px;
      box-shadow: 0 0 10px #000;
      flex: 1;
      text-align: center;
    }
    .filters {
      display: flex;
      flex-wrap: wrap;
      gap: 10px;
      margin-bottom: 20px;
    }
    .filters select, .filters input {
      padding: 8px;
      border-radius: 5px;
      border: none;
    }
    canvas {
      margin-bottom: 30px;
      background-color: #1e1e1e;
      padding: 10px;
      border-radius: 10px;
    }
    table {
      background-color: #1e1e1e !important;
      color: white !important;
      border-radius: 10px;
    }
    .dt-button {
      background-color: #4db8ff !important;
      color: black !important;
      border-radius: 5px;
      margin-bottom: 10px;
    }
  </style>
</head>
<body>

<h1>ðŸ“Š Painel de Monitorias - CASA</h1>

<div class="dashboard">
  <div class="card" id="card-total">Total: 0</div>
  <div class="card" id="card-tipos">Tipos: 0</div>
  <div class="card" id="card-conformidade">Conformidades: 0</div>
</div>

<div class="filters">
  <select id="monitorFilter"><option value="">Todos os Monitores</option></select>
  <select id="tipoFilter"><option value="">Todos os Tipos</option></select>
  <select id="celulaFilter"><option value="">Todas as CÃ©lulas</option></select>
  <input type="date" id="dataInicio">
  <input type="date" id="dataFim">
  <button onclick="aplicarFiltros()">Aplicar Filtros</button>
</div>

<canvas id="graficoTipo" height="100"></canvas>
<canvas id="graficoMonitor" height="100"></canvas>
<canvas id="graficoConformidade" height="100"></canvas>

<table id="tabela" class="display nowrap" style="width:100%">
  <thead>
    <tr>
      <th>Data</th>
      <th>Tipo</th>
      <th>CÃ©lula</th>
      <th>Monitor</th>
      <th>Conformidade</th>
      <th>Nota</th>
    </tr>
  </thead>
  <tbody></tbody>
</table>

<script>
const dados = [
  {
    "data": "2025-01-06",
    "tipo": "GravaÃ§Ã£o",
    "celula": "AdmissÃ£o UJ",
    "monitor": "Michelle Oliveira dos Santos",
    "nao_conformidade": "NÃ£o",
    "nota": "-"
  },
  {
    "data": "2025-01-04",
    "tipo": "GravaÃ§Ã£o",
    "celula": "AdmissÃ£o Uva",
    "monitor": "Viviane Cesar da Cruz",
    "nao_conformidade": "Sim",
    "nota": "5"
  }
  // Insira mais dados aqui ou substitua pelo JSON real
];

let dadosFiltrados = [...dados];

function atualizarFiltros() {
  const campos = {
    monitor: new Set(),
    tipo: new Set(),
    celula: new Set()
  };
  dados.forEach(d => {
    campos.monitor.add(d.monitor);
    campos.tipo.add(d.tipo);
    campos.celula.add(d.celula);
  });

  for (let [id, values] of Object.entries(campos)) {
    const sel = document.getElementById(id + "Filter");
    values.forEach(v => sel.innerHTML += `<option value="${v}">${v}</option>`);
  }
}

function aplicarFiltros() {
  const monitor = document.getElementById('monitorFilter').value;
  const tipo = document.getElementById('tipoFilter').value;
  const celula = document.getElementById('celulaFilter').value;
  const dataInicio = document.getElementById('dataInicio').value;
  const dataFim = document.getElementById('dataFim').value;

  dadosFiltrados = dados.filter(d => {
    return (!monitor || d.monitor === monitor) &&
           (!tipo || d.tipo === tipo) &&
           (!celula || d.celula === celula) &&
           (!dataInicio || d.data >= dataInicio) &&
           (!dataFim || d.data <= dataFim);
  });

  desenharGraficos();
  preencherTabela();
  atualizarCards();
}

function desenharGraficos() {
  const ctx1 = document.getElementById("graficoTipo").getContext("2d");
  const ctx2 = document.getElementById("graficoMonitor").getContext("2d");
  const ctx3 = document.getElementById("graficoConformidade").getContext("2d");

  if (window.chart1) chart1.destroy();
  if (window.chart2) chart2.destroy();
  if (window.chart3) chart3.destroy();

  const tipo = contar("tipo");
  const monitor = contar("monitor");
  const conf = contar("nao_conformidade");

  chart1 = new Chart(ctx1, {
    type: "bar",
    data: {
      labels: Object.keys(tipo),
      datasets: [{ label: "Por Tipo", data: Object.values(tipo), backgroundColor: "#4db8ff" }]
    }
  });

  chart2 = new Chart(ctx2, {
    type: "bar",
    data: {
      labels: Object.keys(monitor),
      datasets: [{ label: "Por Monitor", data: Object.values(monitor), backgroundColor: "#4ddb4d" }]
    }
  });

  chart3 = new Chart(ctx3, {
    type: "pie",
    data: {
      labels: Object.keys(conf),
      datasets: [{ data: Object.values(conf), backgroundColor: ["#ff6666", "#66ff66", "#cccccc"] }]
    }
  });
}

function contar(campo) {
  return dadosFiltrados.reduce((acc, d) => {
    acc[d[campo]] = (acc[d[campo]] || 0) + 1;
    return acc;
  }, {});
}

function preencherTabela() {
  const tbody = document.querySelector("#tabela tbody");
  tbody.innerHTML = "";
  dadosFiltrados.forEach(d => {
    tbody.innerHTML += `
      <tr>
        <td>${d.data}</td>
        <td>${d.tipo}</td>
        <td>${d.celula}</td>
        <td>${d.monitor}</td>
        <td>${d.nao_conformidade}</td>
        <td>${d.nota}</td>
      </tr>`;
  });

  if ($.fn.DataTable.isDataTable('#tabela')) {
    $('#tabela').DataTable().clear().destroy();
  }

  $('#tabela').DataTable({
    dom: 'Bfrtip',
    buttons: ['excelHtml5'],
    paging: true,
    responsive: true
  });
}

function atualizarCards() {
  document.getElementById('card-total').textContent = `Total: ${dadosFiltrados.length}`;
  document.getElementById('card-tipos').textContent = `Tipos: ${new Set(dadosFiltrados.map(d => d.tipo)).size}`;
  document.getElementById('card-conformidade').textContent = `Conformidades: ${contar("nao_conformidade")["Sim"] || 0}`;
}

// InicializaÃ§Ã£o
atualizarFiltros();
aplicarFiltros();
</script>

</body>
</html>
